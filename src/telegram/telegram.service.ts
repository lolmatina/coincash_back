import { Injectable, Inject, Optional } from '@nestjs/common';
import axios from 'axios';
import * as fs from 'fs';
import FormData from 'form-data';
import { ManagerService } from '../manager/manager.service';
import { UserService } from '../user/user.service';
import { EmailService } from '../email/email.service';
import { SupabaseService } from '../database/supabase.service';
import { DATABASE_SERVICE } from '../database/services.provider';
import { IDatabaseService } from '../database/interfaces/database.interface';

@Injectable()
export class TelegramService {
  private readonly botToken: string;

  constructor(
    private readonly managerService: ManagerService,
    private readonly userService: UserService,
    private readonly emailService: EmailService,
    private readonly supabaseService: SupabaseService,
    @Inject(DATABASE_SERVICE) private readonly databaseService: IDatabaseService,
  ) {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN;
  }

  async handleUpdate(update: any): Promise<void> {
    if (!this.botToken) return;
    
    if (update.message && update.message.text) {
      const chatId = String(update.message.chat.id);
      const text: string = update.message.text.trim();
      
      // Handle authentication command (still needed for initial setup)
      if (text.startsWith('/auth')) {
        const parts = text.split(' ');
        const password = parts[1] || '';
        if (password && password === (process.env.MANAGER_PASSWORD || '')) {
          await this.managerService.registerManager(chatId);
          await this.sendMainMenu(chatId, '‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.');
        } else {
          await this.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.');
        }
      } 
      // Handle start command and show main menu
      else if (text === '/start' || text === '/help') {
        const managers = await this.managerService.getAllManagers();
        const isManager = managers.some(m => m.telegram_chat_id === chatId);
        
        if (isManager) {
          await this.sendMainMenu(chatId);
        } else {
          await this.sendMessage(chatId, 
            `ü§ñ **–ë–æ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**\n\n` +
            `–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é:\n` +
            `/auth <–ø–∞—Ä–æ–ª—å>\n\n` +
            `–ü–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Å –∫–Ω–æ–ø–∫–∞–º–∏.`
          );
        }
      }
      // For any other text, show main menu if manager
      else {
        const managers = await this.managerService.getAllManagers();
        const isManager = managers.some(m => m.telegram_chat_id === chatId);
        
        if (isManager) {
          await this.sendMainMenu(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:');
        } else {
          await this.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é /auth <–ø–∞—Ä–æ–ª—å>');
        }
      }
    } else if (update.callback_query) {
      const data: string = update.callback_query.data;
      const chatId = String(update.callback_query.message.chat.id);
      const messageId = update.callback_query.message.message_id;
      
      try {
        const parsed = JSON.parse(data);
        
        // Handle main menu actions
        if (parsed.type === 'show_pending') {
          await this.showPendingUsers(chatId, messageId);
        } else if (parsed.type === 'show_stats') {
          await this.showStats(chatId, messageId);
        } else if (parsed.type === 'back_to_menu') {
          await this.updateToMainMenu(chatId, messageId);
        } else if (parsed.type === 'refresh_pending') {
          await this.showPendingUsers(chatId, messageId, true);
        }
        // Handle user verification actions
        else if (parsed.type === 'approve' || parsed.type === 'deny') {
          const userId: number = parsed.userId;
          const userIndex = parsed.userIndex || 0;
          
          // Get user details for email notification
          const user = await this.userService.findOne(userId);
          
          if (parsed.type === 'approve') {
            await this.userService.update(userId, { documents_verified_at: new Date().toISOString() } as any);
            
            // Update the message to show approval status
            await this.editMessage(chatId, messageId, 
              `‚úÖ **–û–î–û–ë–†–ï–ù–û**\n\n` +
              `üë§ **${user.name} ${user.lastname}**\n` +
              `üìß ${user.email}\n` +
              `‚è∞ –û–¥–æ–±—Ä–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`, 
              [[
                { text: 'üîô –ö –æ–∂–∏–¥–∞—é—â–∏–º', callback_data: JSON.stringify({ type: 'refresh_pending' }) },
                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: JSON.stringify({ type: 'back_to_menu' }) }
              ]]
            );
            
            // Send approval email to user
            try {
              await this.emailService.sendDocumentApprovalEmail(user.email, user.name);
              console.log(`üìß Email –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${user.email}`);
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏:', error);
            }
          } else if (parsed.type === 'deny') {
            await this.userService.update(userId, { 
              documents_verified_at: null,
            } as any);
            
            // Update the message to show denial status
            await this.editMessage(chatId, messageId, 
              `‚ùå **–û–¢–ö–õ–û–ù–ï–ù–û**\n\n` +
              `üë§ **${user.name} ${user.lastname}**\n` +
              `üìß ${user.email}\n` +
              `‚è∞ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`, 
              [[
                { text: 'üîô –ö –æ–∂–∏–¥–∞—é—â–∏–º', callback_data: JSON.stringify({ type: 'refresh_pending' }) },
                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: JSON.stringify({ type: 'back_to_menu' }) }
              ]]
            );
            
            // Send denial email to user
            try {
              await this.emailService.sendDocumentDenialEmail(user.email, user.name);
              console.log(`üìß Email –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${user.email}`);
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏:', error);
            }
          }
        }
        // Handle user detail view
        else if (parsed.type === 'view_user') {
          const userId = parsed.userId;
          await this.showUserDetails(chatId, messageId, userId);
        }
        // Handle pagination
        else if (parsed.type === 'page') {
          const page = parsed.page || 0;
          await this.showPendingUsers(chatId, messageId, true, page);
        }
        
        // Answer callback query to remove loading state
        await axios.post(`https://api.telegram.org/bot${this.botToken}/answerCallbackQuery`, {
          callback_query_id: update.callback_query.id
        });
        
      } catch (e) {
        console.error('Error parsing callback data:', e);
        await axios.post(`https://api.telegram.org/bot${this.botToken}/answerCallbackQuery`, {
          callback_query_id: update.callback_query.id,
          text: '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞'
        });
      }
    }
  }

  async sendDocumentSubmission(params: { email: string; name: string; frontPath: string; backPath: string; selfiePath: string; }): Promise<void> {
    if (!this.botToken) {
      console.log('Telegram bot not configured, skipping document submission:', params);
      return;
    }

    try {
      const managers = await this.managerService.getAllManagers();
      if (!managers.length) {
        console.log('No managers registered; skipping broadcast');
        return;
      }

      const userId = await this.resolveUserId(params.email);

      for (const manager of managers) {
        // Send notification message with quick action buttons
        await axios.post(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
          chat_id: manager.telegram_chat_id,
          text: `üîî **–ù–æ–≤–∞—è –ø–æ–¥–∞—á–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**\n\nüë§ **${params.name}**\nüìß ${params.email}\n‚è∞ ${new Date().toLocaleString('ru-RU')}`,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { 
                  text: 'üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã', 
                  callback_data: JSON.stringify({ 
                    type: 'view_user', 
                    userId: userId 
                  }) 
                },
              ],
              [
                { 
                  text: '‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ', 
                  callback_data: JSON.stringify({ 
                    type: 'approve', 
                    userId: userId 
                  }) 
                },
                { 
                  text: '‚ùå –ë—ã—Å—Ç—Ä–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ', 
                  callback_data: JSON.stringify({ 
                    type: 'deny', 
                    userId: userId 
                  }) 
                },
              ],
              [
                { 
                  text: 'üìã –í—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ', 
                  callback_data: JSON.stringify({ 
                    type: 'show_pending' 
                  }) 
                }
              ]
            ],
          },
        });

        // Send documents individually (managers can still access them directly)
        // try {
        //   console.log('üìé Attempting to send documents:', {
        //     front: params.frontPath,
        //     back: params.backPath,
        //     selfie: params.selfiePath
        //   });
          
        //   await this.sendDocument(manager.telegram_chat_id, params.frontPath, 'passport_front.jpg');
        //   console.log('‚úÖ Front document sent successfully');
          
        //   await this.sendDocument(manager.telegram_chat_id, params.backPath, 'passport_back.jpg');
        //   console.log('‚úÖ Back document sent successfully');
          
        //   await this.sendDocument(manager.telegram_chat_id, params.selfiePath, 'selfie_with_passport.jpg');
        //   console.log('‚úÖ Selfie document sent successfully');
          
        // } catch (docError) {
        //   console.error('‚ùå Failed to send documents to manager:', docError);
        //   console.error('Document paths:', {
        //     front: params.frontPath,
        //     back: params.backPath,
        //     selfie: params.selfiePath
        //   });
          
        //   // Send a follow-up message indicating document sending failed
        //   await axios.post(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
        //     chat_id: manager.telegram_chat_id,
        //     text: `‚ö†Ô∏è **–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**\n\n–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è ${params.name} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\nüìé **–°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã:**\n` +
        //           `üîó [–õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞](${params.frontPath})\n` +
        //           `üîó [–û–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞](${params.backPath})\n` +
        //           `üîó [–°–µ–ª—Ñ–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º](${params.selfiePath})\n\n` +
        //           `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã" –≤—ã—à–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.`,
        //     parse_mode: 'Markdown'
        //   });
        // }
      }

      console.log(`üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∞—á–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º Telegram –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${params.email}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–∞—á–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Telegram:', error);
      // Only throw if it's a critical error (like no managers or bot token issues)
      if (error.message.includes('bot token') || error.message.includes('No managers')) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∞—á–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º');
      }
      // For other errors, log but don't throw to prevent blocking the user's submission
      console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∞—á–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º–æ–≥–ª–æ —á–∞—Å—Ç–∏—á–Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è, –Ω–æ –ø–æ–¥–∞—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ –∑–∞–ø–∏—Å–∞–Ω–∞');
    }
  }

  private async resolveUserId(email: string): Promise<number> {
    const user = await this.userService.findByEmail(email);
    return user?.id;
  }

  private async sendMessage(chatId: string, text: string): Promise<void> {
    await axios.post(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
      chat_id: chatId,
      text,
    });
  }

  private async sendDocument(chatId: string, filePathOrUrl: string, filename: string): Promise<void> {
    try {
      console.log(`üì§ Sending document: ${filename} from ${filePathOrUrl}`);
      
      const formData = new FormData();
      formData.append('chat_id', chatId);
      
      // Check if it's a URL or local file path
      if (filePathOrUrl.startsWith('http://') || filePathOrUrl.startsWith('https://')) {
        console.log('üåê Fetching file from URL:', filePathOrUrl);
        
        try {
          // It's a URL, fetch the file first
          const response = await axios.get(filePathOrUrl, { 
            responseType: 'stream',
            timeout: 30000, // 30 second timeout
            maxContentLength: 50 * 1024 * 1024, // 50MB max file size
          });
          
          console.log('üì• File fetched successfully, size:', response.headers['content-length']);
          formData.append('document', response.data, { filename });
          
        } catch (fetchError) {
          console.error('‚ùå Failed to fetch file from URL:', fetchError.message);
          throw new Error(`Failed to fetch file from URL: ${fetchError.message}`);
        }
      } else {
        // It's a local file path
        if (fs.existsSync(filePathOrUrl)) {
          console.log('üìÅ Reading local file:', filePathOrUrl);
          formData.append('document', fs.createReadStream(filePathOrUrl), { filename });
        } else {
          console.error(`‚ùå File not found: ${filePathOrUrl}`);
          throw new Error(`File not found: ${filePathOrUrl}`);
        }
      }
      
      console.log('üì§ Sending document to Telegram...');
      await axios.post(`https://api.telegram.org/bot${this.botToken}/sendDocument`, formData, {
        headers: formData.getHeaders(),
        timeout: 60000, // 60 second timeout for upload
      });
      
      console.log('‚úÖ Document sent successfully:', filename);
      
    } catch (error) {
      console.error(`‚ùå Error sending document ${filename}:`, error.message);
      
      // Provide more specific error messages
      if (error.message.includes('timeout')) {
        throw new Error(`Timeout sending document ${filename}: File too large or slow connection`);
      } else if (error.message.includes('413')) {
        throw new Error(`Document ${filename} too large for Telegram (max 50MB)`);
      } else if (error.message.includes('400')) {
        throw new Error(`Invalid document format for ${filename}`);
      } else {
        throw new Error(`Failed to send document ${filename}: ${error.message}`);
      }
    }
  }

  private async sendMainMenu(chatId: string, message?: string): Promise<void> {
    const text = message || 'ü§ñ **–ë–æ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
    
    await axios.post(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
      chat_id: chatId,
      text,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üìã –û–∂–∏–¥–∞—é—â–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏', callback_data: JSON.stringify({ type: 'show_pending' }) },
          ],
          [
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: JSON.stringify({ type: 'show_stats' }) },
          ]
        ],
      },
    });
  }

  private async updateToMainMenu(chatId: string, messageId: number): Promise<void> {
    const text = 'ü§ñ **–ë–æ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
    
    await this.editMessage(chatId, messageId, text, [
      [
        { text: 'üìã –û–∂–∏–¥–∞—é—â–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏', callback_data: JSON.stringify({ type: 'show_pending' }) },
      ],
      [
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: JSON.stringify({ type: 'show_stats' }) },
      ]
    ]);
  }

  private async showPendingUsers(chatId: string, messageId: number, isRefresh: boolean = false, page: number = 0): Promise<void> {
    try {
      const databaseType = process.env.DATABASE_TYPE || 'supabase';
      let unprocessedUsers;
      
      if (databaseType === 'supabase') {
        unprocessedUsers = await this.supabaseService.getUnprocessedUsers();
      } else {
        unprocessedUsers = await this.databaseService.getUnprocessedUsers();
      }
      
      if (unprocessedUsers.length === 0) {
        await this.editMessage(chatId, messageId, 
          '‚úÖ **–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π!**\n\n–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.', 
          [[
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: JSON.stringify({ type: 'refresh_pending' }) },
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: JSON.stringify({ type: 'back_to_menu' }) }
          ]]
        );
        return;
      }

      const itemsPerPage = 5;
      const totalPages = Math.ceil(unprocessedUsers.length / itemsPerPage);
      const startIndex = page * itemsPerPage;
      const endIndex = Math.min(startIndex + itemsPerPage, unprocessedUsers.length);
      const pageUsers = unprocessedUsers.slice(startIndex, endIndex);

      let text = `üìã **–û–∂–∏–¥–∞—é—â–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏**\n\n`;
      text += `üìÑ –í—Å–µ–≥–æ: ${unprocessedUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`;
      text += `üìÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${page + 1}/${totalPages}\n\n`;
      
      const keyboard = [];
      
      // Add user buttons
      for (let i = 0; i < pageUsers.length; i++) {
        const user = pageUsers[i];
        const globalIndex = startIndex + i;
        const submittedDate = new Date(user.documents_submitted_at).toLocaleDateString('ru-RU');
        
        text += `${globalIndex + 1}. **${user.name} ${user.lastname}**\n`;
        text += `   üìß ${user.email}\n`;
        text += `   üìÖ ${submittedDate}\n\n`;
        
        keyboard.push([{
          text: `üë§ ${globalIndex + 1}. ${user.name} ${user.lastname}`,
          callback_data: JSON.stringify({ 
            type: 'view_user', 
            userId: user.id,
            userIndex: globalIndex 
          })
        }]);
      }
      
      // Add pagination buttons if needed
      const paginationRow = [];
      if (page > 0) {
        paginationRow.push({
          text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
          callback_data: JSON.stringify({ type: 'page', page: page - 1 })
        });
      }
      if (page < totalPages - 1) {
        paginationRow.push({
          text: '‚û°Ô∏è –í–ø–µ—Ä–µ–¥',
          callback_data: JSON.stringify({ type: 'page', page: page + 1 })
        });
      }
      if (paginationRow.length > 0) {
        keyboard.push(paginationRow);
      }
      
      // Add control buttons
      keyboard.push([
        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: JSON.stringify({ type: 'refresh_pending' }) },
        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: JSON.stringify({ type: 'back_to_menu' }) }
      ]);
      
      await this.editMessage(chatId, messageId, text, keyboard);
      
    } catch (error) {
      console.error('Error fetching pending users:', error);
      await this.editMessage(chatId, messageId, 
        '‚ùå **–û—à–∏–±–∫–∞**\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 
        [[
          { text: 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data: JSON.stringify({ type: 'refresh_pending' }) },
          { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: JSON.stringify({ type: 'back_to_menu' }) }
        ]]
      );
    }
  }

  private async showUserDetails(chatId: string, messageId: number, userId: number): Promise<void> {
    try {
      const user = await this.userService.findOne(userId);
      if (!user) {
        await this.editMessage(chatId, messageId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', [[{ 
          text: 'üîô –ù–∞–∑–∞–¥', 
          callback_data: JSON.stringify({ type: 'refresh_pending' }) 
        }]]);
        return;
      }

      const submittedDate = new Date(user.documents_submitted_at).toLocaleString('ru-RU');
      
      const text = `üë§ **–î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n` +
                   `**–ò–º—è:** ${user.name} ${user.lastname}\n` +
                   `**Email:** ${user.email}\n` +
                   `**–ü–æ–¥–∞–Ω–æ:** ${submittedDate}\n\n` +
                   `üìÑ **–î–æ–∫—É–º–µ–Ω—Ç—ã:**\n` +
                   `üîó [–õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞](${user.document_front_url})\n` +
                   `üîó [–û–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞](${user.document_back_url})\n` +
                   `üîó [–°–µ–ª—Ñ–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º](${user.document_selfie_url})`;

      const keyboard = [
        [
          { 
            text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', 
            callback_data: JSON.stringify({ 
              type: 'approve', 
              userId: user.id
            }) 
          },
          { 
            text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 
            callback_data: JSON.stringify({ 
              type: 'deny', 
              userId: user.id
            }) 
          },
        ],
        [
          { text: 'üîô –ö —Å–ø–∏—Å–∫—É', callback_data: JSON.stringify({ type: 'refresh_pending' }) },
          { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: JSON.stringify({ type: 'back_to_menu' }) }
        ]
      ];
      
      await this.editMessage(chatId, messageId, text, keyboard);
      
    } catch (error) {
      console.error('Error fetching user details:', error);
      await this.editMessage(chatId, messageId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', [[{ 
        text: 'üîô –ù–∞–∑–∞–¥', 
        callback_data: JSON.stringify({ type: 'refresh_pending' }) 
      }]]);
    }
  }

  private async showStats(chatId: string, messageId: number): Promise<void> {
    try {
      const databaseType = process.env.DATABASE_TYPE || 'supabase';
      let allUsers = [];
      let pendingUsers = [];
      
      if (databaseType === 'supabase') {
        // Get all users with submitted documents using Supabase client directly
        const supabaseClient = this.supabaseService.getClient();
        if (!supabaseClient) {
          throw new Error('Supabase client is not available');
        }
        
        const { data, error } = await supabaseClient
          .from('users')
          .select('*')
          .not('documents_submitted_at', 'is', null);
          
        if (error) {
          throw new Error(`Failed to fetch users: ${error.message}`);
        }
        
        allUsers = data;
        pendingUsers = await this.supabaseService.getUnprocessedUsers();
      } else {
        // Use database service interface for non-Supabase implementations
        // Use type assertion since we know the implementation has this method
        allUsers = await (this.databaseService as any).getAllUsersWithDocuments();
        pendingUsers = await this.databaseService.getUnprocessedUsers();
      }
      
      const approvedUsers = allUsers.filter(u => u.documents_verified_at !== null);
      const deniedUsers = allUsers.filter(u => u.documents_verified_at === null && u.documents_submitted_at !== null);
      
      const text = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n` +
                   `üìÑ **–í—Å–µ–≥–æ –ø–æ–¥–∞—á:** ${allUsers.length}\n` +
                   `‚è≥ **–û–∂–∏–¥–∞—é—Ç:** ${pendingUsers.length}\n` +
                   `‚úÖ **–û–¥–æ–±—Ä–µ–Ω—ã:** ${approvedUsers.length}\n` +
                   `‚ùå **–û—Ç–∫–ª–æ–Ω–µ–Ω—ã:** ${deniedUsers.length}\n\n` +
                   `üìÖ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** ${new Date().toLocaleString('ru-RU')}`;
      
      await this.editMessage(chatId, messageId, text, [
        [
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: JSON.stringify({ type: 'show_stats' }) },
          { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: JSON.stringify({ type: 'back_to_menu' }) }
        ]
      ]);
      
    } catch (error) {
      console.error('Error fetching statistics:', error);
      await this.editMessage(chatId, messageId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', [[{ 
        text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 
        callback_data: JSON.stringify({ type: 'back_to_menu' }) 
      }]]);
    }
  }

  private async editMessage(chatId: string, messageId: number, text: string, keyboard: any[][] = []): Promise<void> {
    try {
      await axios.post(`https://api.telegram.org/bot${this.botToken}/editMessageText`, {
        chat_id: chatId,
        message_id: messageId,
        text,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: keyboard,
        },
      });
    } catch (error) {
      // If edit fails (e.g., message is too old), send a new message
      console.log('Failed to edit message, sending new one:', error.response?.data?.description);
      await axios.post(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
        chat_id: chatId,
        text,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: keyboard,
        },
      });
    }
  }
}


